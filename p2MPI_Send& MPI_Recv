#include <stdio.h>
#include <math.h>
#include <mpi.h>
#include <stdbool.h>

bool isPrime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

int main(int argc, char* argv[]) {
    int rank, size;
    int x, y;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        
        printf("Enter x and y:  \n");
        scanf("%d %d", &x, &y);

        int subRang = (y-x) / (size - 1);
        int remainder = (y-x) % (size - 1);

        for (int i = 1; i < size; i++) {
            int start, end;
            if (i == size - 1) {
                start = ((i - 1) * subRang) + x;
                end = start + subRang + remainder - 1;
            } else {
                start = ((i - 1) * subRang) + x;
                end = start + subRang - 1;
            }

            MPI_Send(&start, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
            MPI_Send(&end, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
            
        }
    } else {
        int start, end;
        MPI_Recv(&start, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        MPI_Recv(&end, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        int localCount = 0;

        for (int i = start; i <= end ; i++) {
            if (isPrime(i)) {
                localCount++;
                
            }
        }

        MPI_Send(&localCount, 1, MPI_INT, 0, 0, MPI_COMM_WORLD); 
    }

    int globalCount = 0;
    if (rank == 0) {
        int tempLocalCount;
        for (int i = 1; i < size; ++i) {
            MPI_Recv(&tempLocalCount, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            globalCount += tempLocalCount;
        }
        printf("Total number of primes between %d and %d: %d\n", x, y, global_count);
    }

    MPI_Finalize();
    return 0;
}
